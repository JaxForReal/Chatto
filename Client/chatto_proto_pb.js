/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.chatto.Error', null, global);
goog.exportSymbol('proto.chatto.Join', null, global);
goog.exportSymbol('proto.chatto.JoinResponse', null, global);
goog.exportSymbol('proto.chatto.JoinResponseSuccessful', null, global);
goog.exportSymbol('proto.chatto.MessageFromServer', null, global);
goog.exportSymbol('proto.chatto.MessageFromServer.Chat', null, global);
goog.exportSymbol('proto.chatto.MessageFromServer.UserAction', null, global);
goog.exportSymbol('proto.chatto.MessageFromServer.UserAction.ActionType', null, global);
goog.exportSymbol('proto.chatto.MessageToServer', null, global);
goog.exportSymbol('proto.chatto.MessageToServer.Chat', null, global);
goog.exportSymbol('proto.chatto.MessageToServer.ReadReciept', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.MessageFromServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chatto.MessageFromServer.oneofGroups_);
};
goog.inherits(proto.chatto.MessageFromServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.MessageFromServer.displayName = 'proto.chatto.MessageFromServer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chatto.MessageFromServer.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.chatto.MessageFromServer.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CHAT_FROM_SERVER: 1,
  ERROR: 2,
  USER_ACTION: 3,
  SERVER_BROADCAST: 4
};

/**
 * @return {proto.chatto.MessageFromServer.MessageCase}
 */
proto.chatto.MessageFromServer.prototype.getMessageCase = function() {
  return /** @type {proto.chatto.MessageFromServer.MessageCase} */(jspb.Message.computeOneofCase(this, proto.chatto.MessageFromServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.MessageFromServer.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.MessageFromServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.MessageFromServer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.MessageFromServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    chatFromServer: (f = msg.getChatFromServer()) && proto.chatto.MessageFromServer.Chat.toObject(includeInstance, f),
    error: jspb.Message.getField(msg, 2),
    userAction: (f = msg.getUserAction()) && proto.chatto.MessageFromServer.UserAction.toObject(includeInstance, f),
    serverBroadcast: jspb.Message.getField(msg, 4),
    time: msg.getTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.MessageFromServer} The clone.
 */
proto.chatto.MessageFromServer.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.MessageFromServer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Chat chat_from_server = 1;
 * @return {proto.chatto.MessageFromServer.Chat}
 */
proto.chatto.MessageFromServer.prototype.getChatFromServer = function() {
  return /** @type{proto.chatto.MessageFromServer.Chat} */ (
    jspb.Message.getWrapperField(this, proto.chatto.MessageFromServer.Chat, 1));
};


/** @param {proto.chatto.MessageFromServer.Chat|undefined} value  */
proto.chatto.MessageFromServer.prototype.setChatFromServer = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.chatto.MessageFromServer.oneofGroups_[0], value);
};


proto.chatto.MessageFromServer.prototype.clearChatFromServer = function() {
  this.setChatFromServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.chatto.MessageFromServer.prototype.hasChatFromServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {proto.chatto.Error}
 */
proto.chatto.MessageFromServer.prototype.getError = function() {
  return /** @type {proto.chatto.Error} */ (!this.hasError() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {proto.chatto.Error|undefined} value  */
proto.chatto.MessageFromServer.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.chatto.MessageFromServer.oneofGroups_[0], value);
};


proto.chatto.MessageFromServer.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.chatto.MessageFromServer.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.chatto.MessageFromServer.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UserAction user_action = 3;
 * @return {proto.chatto.MessageFromServer.UserAction}
 */
proto.chatto.MessageFromServer.prototype.getUserAction = function() {
  return /** @type{proto.chatto.MessageFromServer.UserAction} */ (
    jspb.Message.getWrapperField(this, proto.chatto.MessageFromServer.UserAction, 3));
};


/** @param {proto.chatto.MessageFromServer.UserAction|undefined} value  */
proto.chatto.MessageFromServer.prototype.setUserAction = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.chatto.MessageFromServer.oneofGroups_[0], value);
};


proto.chatto.MessageFromServer.prototype.clearUserAction = function() {
  this.setUserAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.chatto.MessageFromServer.prototype.hasUserAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string server_broadcast = 4;
 * @return {string}
 */
proto.chatto.MessageFromServer.prototype.getServerBroadcast = function() {
  return /** @type {string} */ (!this.hasServerBroadcast() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string?|undefined} value  */
proto.chatto.MessageFromServer.prototype.setServerBroadcast = function(value) {
  jspb.Message.setOneofField(this, 4, proto.chatto.MessageFromServer.oneofGroups_[0], value);
};


proto.chatto.MessageFromServer.prototype.clearServerBroadcast = function() {
  jspb.Message.setOneofField(this, 4, proto.chatto.MessageFromServer.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.chatto.MessageFromServer.prototype.hasServerBroadcast = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 time = 15;
 * @return {number}
 */
proto.chatto.MessageFromServer.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 15, 0));
};


/** @param {number} value  */
proto.chatto.MessageFromServer.prototype.setTime = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.MessageFromServer.Chat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatto.MessageFromServer.Chat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.MessageFromServer.Chat.displayName = 'proto.chatto.MessageFromServer.Chat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.MessageFromServer.Chat.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.MessageFromServer.Chat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.MessageFromServer.Chat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.MessageFromServer.Chat.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: msg.getText(),
    name: msg.getName(),
    trip: msg.getTrip()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.MessageFromServer.Chat} The clone.
 */
proto.chatto.MessageFromServer.Chat.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.MessageFromServer.Chat} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.chatto.MessageFromServer.Chat.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.chatto.MessageFromServer.Chat.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chatto.MessageFromServer.Chat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.chatto.MessageFromServer.Chat.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string trip = 3;
 * @return {string}
 */
proto.chatto.MessageFromServer.Chat.prototype.getTrip = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.chatto.MessageFromServer.Chat.prototype.setTrip = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.MessageFromServer.UserAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatto.MessageFromServer.UserAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.MessageFromServer.UserAction.displayName = 'proto.chatto.MessageFromServer.UserAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.MessageFromServer.UserAction.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.MessageFromServer.UserAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.MessageFromServer.UserAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.MessageFromServer.UserAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionType: msg.getActionType(),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.MessageFromServer.UserAction} The clone.
 */
proto.chatto.MessageFromServer.UserAction.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.MessageFromServer.UserAction} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ActionType action_type = 1;
 * @return {!proto.chatto.MessageFromServer.UserAction.ActionType}
 */
proto.chatto.MessageFromServer.UserAction.prototype.getActionType = function() {
  return /** @type {!proto.chatto.MessageFromServer.UserAction.ActionType} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.chatto.MessageFromServer.UserAction.ActionType} value  */
proto.chatto.MessageFromServer.UserAction.prototype.setActionType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chatto.MessageFromServer.UserAction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.chatto.MessageFromServer.UserAction.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.chatto.MessageFromServer.UserAction.ActionType = {
  JOIN: 0,
  LEAVE: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.JoinResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chatto.JoinResponse.oneofGroups_);
};
goog.inherits(proto.chatto.JoinResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.JoinResponse.displayName = 'proto.chatto.JoinResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chatto.JoinResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.chatto.JoinResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  SUCCESS: 1,
  ERROR: 2
};

/**
 * @return {proto.chatto.JoinResponse.ResponseCase}
 */
proto.chatto.JoinResponse.prototype.getResponseCase = function() {
  return /** @type {proto.chatto.JoinResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.chatto.JoinResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.JoinResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.JoinResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.JoinResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.JoinResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.chatto.JoinResponseSuccessful.toObject(includeInstance, f),
    error: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.JoinResponse} The clone.
 */
proto.chatto.JoinResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.JoinResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional JoinResponseSuccessful success = 1;
 * @return {proto.chatto.JoinResponseSuccessful}
 */
proto.chatto.JoinResponse.prototype.getSuccess = function() {
  return /** @type{proto.chatto.JoinResponseSuccessful} */ (
    jspb.Message.getWrapperField(this, proto.chatto.JoinResponseSuccessful, 1));
};


/** @param {proto.chatto.JoinResponseSuccessful|undefined} value  */
proto.chatto.JoinResponse.prototype.setSuccess = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.chatto.JoinResponse.oneofGroups_[0], value);
};


proto.chatto.JoinResponse.prototype.clearSuccess = function() {
  this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.chatto.JoinResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {proto.chatto.Error}
 */
proto.chatto.JoinResponse.prototype.getError = function() {
  return /** @type {proto.chatto.Error} */ (!this.hasError() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {proto.chatto.Error|undefined} value  */
proto.chatto.JoinResponse.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 2, proto.chatto.JoinResponse.oneofGroups_[0], value);
};


proto.chatto.JoinResponse.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 2, proto.chatto.JoinResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.chatto.JoinResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.JoinResponseSuccessful = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatto.JoinResponseSuccessful.repeatedFields_, null);
};
goog.inherits(proto.chatto.JoinResponseSuccessful, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.JoinResponseSuccessful.displayName = 'proto.chatto.JoinResponseSuccessful';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatto.JoinResponseSuccessful.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.JoinResponseSuccessful.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.JoinResponseSuccessful.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.JoinResponseSuccessful} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.JoinResponseSuccessful.toObject = function(includeInstance, msg) {
  var f, obj = {
    onlineUsersList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.JoinResponseSuccessful} The clone.
 */
proto.chatto.JoinResponseSuccessful.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.JoinResponseSuccessful} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string online_users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.chatto.JoinResponseSuccessful.prototype.getOnlineUsersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.chatto.JoinResponseSuccessful.prototype.setOnlineUsersList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.chatto.JoinResponseSuccessful.prototype.clearOnlineUsersList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.Join = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatto.Join, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.Join.displayName = 'proto.chatto.Join';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.Join.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.Join.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.Join} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.Join.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: msg.getRoom(),
    name: msg.getName(),
    password: msg.getPassword()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.Join} The clone.
 */
proto.chatto.Join.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.Join} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string room = 1;
 * @return {string}
 */
proto.chatto.Join.prototype.getRoom = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.chatto.Join.prototype.setRoom = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chatto.Join.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.chatto.Join.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.chatto.Join.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.chatto.Join.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.MessageToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chatto.MessageToServer.oneofGroups_);
};
goog.inherits(proto.chatto.MessageToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.MessageToServer.displayName = 'proto.chatto.MessageToServer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chatto.MessageToServer.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.chatto.MessageToServer.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CHAT_TO_SERVER: 1,
  READ_RECIEPT: 2
};

/**
 * @return {proto.chatto.MessageToServer.MessageCase}
 */
proto.chatto.MessageToServer.prototype.getMessageCase = function() {
  return /** @type {proto.chatto.MessageToServer.MessageCase} */(jspb.Message.computeOneofCase(this, proto.chatto.MessageToServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.MessageToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.MessageToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.MessageToServer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.MessageToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    chatToServer: (f = msg.getChatToServer()) && proto.chatto.MessageToServer.Chat.toObject(includeInstance, f),
    readReciept: (f = msg.getReadReciept()) && proto.chatto.MessageToServer.ReadReciept.toObject(includeInstance, f),
    time: msg.getTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.MessageToServer} The clone.
 */
proto.chatto.MessageToServer.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.MessageToServer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Chat chat_to_server = 1;
 * @return {proto.chatto.MessageToServer.Chat}
 */
proto.chatto.MessageToServer.prototype.getChatToServer = function() {
  return /** @type{proto.chatto.MessageToServer.Chat} */ (
    jspb.Message.getWrapperField(this, proto.chatto.MessageToServer.Chat, 1));
};


/** @param {proto.chatto.MessageToServer.Chat|undefined} value  */
proto.chatto.MessageToServer.prototype.setChatToServer = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.chatto.MessageToServer.oneofGroups_[0], value);
};


proto.chatto.MessageToServer.prototype.clearChatToServer = function() {
  this.setChatToServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.chatto.MessageToServer.prototype.hasChatToServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReadReciept read_reciept = 2;
 * @return {proto.chatto.MessageToServer.ReadReciept}
 */
proto.chatto.MessageToServer.prototype.getReadReciept = function() {
  return /** @type{proto.chatto.MessageToServer.ReadReciept} */ (
    jspb.Message.getWrapperField(this, proto.chatto.MessageToServer.ReadReciept, 2));
};


/** @param {proto.chatto.MessageToServer.ReadReciept|undefined} value  */
proto.chatto.MessageToServer.prototype.setReadReciept = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.chatto.MessageToServer.oneofGroups_[0], value);
};


proto.chatto.MessageToServer.prototype.clearReadReciept = function() {
  this.setReadReciept(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.chatto.MessageToServer.prototype.hasReadReciept = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 time = 15;
 * @return {number}
 */
proto.chatto.MessageToServer.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 15, 0));
};


/** @param {number} value  */
proto.chatto.MessageToServer.prototype.setTime = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.MessageToServer.Chat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatto.MessageToServer.Chat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.MessageToServer.Chat.displayName = 'proto.chatto.MessageToServer.Chat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.MessageToServer.Chat.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.MessageToServer.Chat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.MessageToServer.Chat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.MessageToServer.Chat.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: msg.getText()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.MessageToServer.Chat} The clone.
 */
proto.chatto.MessageToServer.Chat.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.MessageToServer.Chat} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.chatto.MessageToServer.Chat.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.chatto.MessageToServer.Chat.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatto.MessageToServer.ReadReciept = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatto.MessageToServer.ReadReciept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatto.MessageToServer.ReadReciept.displayName = 'proto.chatto.MessageToServer.ReadReciept';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatto.MessageToServer.ReadReciept.prototype.toObject = function(opt_includeInstance) {
  return proto.chatto.MessageToServer.ReadReciept.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatto.MessageToServer.ReadReciept} msg The msg instance to transform.
 * @return {!Object}
 */
proto.chatto.MessageToServer.ReadReciept.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.chatto.MessageToServer.ReadReciept} The clone.
 */
proto.chatto.MessageToServer.ReadReciept.prototype.cloneMessage = function() {
  return /** @type {!proto.chatto.MessageToServer.ReadReciept} */ (jspb.Message.cloneMessage(this));
};


/**
 * @enum {number}
 */
proto.chatto.Error = {
  NAME_TAKEN: 0,
  NAME_INVALID: 1,
  RATE_LIMIT: 2
};

goog.object.extend(exports, proto.chatto);
